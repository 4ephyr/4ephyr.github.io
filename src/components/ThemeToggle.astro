<button
  id="theme-toggle"
  class="p-2 dark:bg-gray-800 rounded-full ml-2 absolute sm:right-0 sm:static m-4 right-0 top-2"
>
  <span id="theme-toggle-icon" class="text-secondary dark:text-primary">
    <svg
      id="sun-icon"
      class="w-5 h-5 hidden dark:block"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M12 4V2m0 20v-2m8-8h2m-20 0h2m14.828-6.828l1.414-1.414m-14.828 0L5.636 5.636m12.728 12.728l1.414 1.414m-14.828 0l1.414-1.414M12 10a2 2 0 110 4 2 2 0 010-4z"
      ></path>
    </svg>
    <svg
      id="moon-icon"
      class="w-5 h-5 block dark:hidden"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M21 12.79A9 9 0 1112.21 3 7.5 7.5 0 0021 12.79z"></path>
    </svg>
  </span>
</button>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const toggleButton = document.getElementById("theme-toggle");
    const savedTheme = localStorage.getItem("theme");
    const metaThemeColor = document.getElementById("theme-color-meta");

    const updateMetaThemeColor = (theme) => {
      if (theme === "dark") {
        metaThemeColor.setAttribute("content", "#141414");
      } else {
        metaThemeColor.setAttribute("content", "#ebfffa");
      }
    };

    const applyTheme = (theme) => {
      if (theme === "dark") {
        document.documentElement.classList.add("dark");
        updateMetaThemeColor("dark");
      } else if (theme === "light") {
        document.documentElement.classList.remove("dark");
        updateMetaThemeColor("light");
      } else {
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        if (prefersDark) {
          document.documentElement.classList.add("dark");
          updateMetaThemeColor("dark");
        } else {
          document.documentElement.classList.remove("dark");
          updateMetaThemeColor("light");
        }
        localStorage.removeItem("theme");
      }
    };
    if (savedTheme) {
      applyTheme(savedTheme);
    } else {
      applyTheme("");
    }
    toggleButton.addEventListener("click", () => {
      const currentTheme = document.documentElement.classList.contains("dark")
        ? "dark"
        : "light";
      const newTheme = currentTheme === "dark" ? "light" : "dark";
      applyTheme(newTheme);
      localStorage.setItem("theme", newTheme);
    });
  });
</script>
